1.638大礼包
    public int shoppingOffers(List<Integer> price, List<List<Integer>> special, List<Integer> needs) {
        int result = Integer.MAX_VALUE;
        for(int i=0;i<special.size();i++){
            List<Integer> offer = special.get(i);
            boolean flag = true;
            for(int j=0;j<needs.size();j++){
                int temp = needs.get(j) - offer.get(j);
                needs.set(j,temp);
                if(flag&&temp<0)
                    flag = false;
            }
            if(flag)
                result = Math.min(result,shoppingOffers(price,special,needs)+offer.get(needs.size()));
            for(int k=0;k<needs.size();k++){
                needs.set(k,needs.get(k)+offer.get(k));
            }
        }
        int nonoffer = 0;
        for(int i=0;i<needs.size();i++){
            nonoffer += needs.get(i)*price.get(i);
        }
        return Math.min(result,nonoffer);
    }
2.139. 单词拆分
    public boolean wordBreak(String s, List<String> wordDict) {
        if(s==null || s.length()==0)
            return true;
        boolean[] res = new boolean[s.length()+1];
        res[0] = true;
        for(int i=0;i<s.length();i++)
        {
            StringBuilder str = new StringBuilder(s.substring(0,i+1));
            for(int j=0;j<=i;j++)
            {
                if(res[j] && wordDict.contains(str.toString()))
                {
                    res[i+1] = true;
                    break;
                }
                str.deleteCharAt(0);
            }
        }
        return res[s.length()];
    }
    
486. Predict the Winner
两人依次拿，如果Player1赢，则Player1拿的>Player2拿的。我们把Player1拿的视为"+"，把Player2拿的视为"-"，如果最后结果大于等于0则Player1赢。

因此对于递归来说，beg ~ end的结果为max(nums[beg] - partition(beg + 1, end), nums[end] - partition(beg, end + 1))；对于非递归来说DP[beg][end]表示即为beg ~ end所取的值的大小（最终与零比较）。

总结：

1. 该问题没有直接比较一个选手所拿元素的和值，而是把问题转换为两个选手所拿元素的差值。这一点很巧妙，是关键的一步。

2. 找出递推表达式：max(nums[beg] - partition(beg + 1, end), nums[end] - partition(beg, end + 1))

3. 通过递推表达式构造递归算法是比较简单的。但是要构造一个非递归的算法难度较大。对于非递归算法，首先在dp中赋初始值，这是我们解题的第一步。在这个问题中，我们使用一个二位的数组dp来表示nums数组中任意开始和结束位置两人结果的差值。

初始的时候，我们仅仅知道对角线上的值。dp[i][i] = nums[i]. 这一点很好理解。

接下来既然是求任意的开始和结束，对于二维数组，那肯定是一个双层的循环。通过dp中已知的元素和动态规划的递推表达式，我们就可以构造出我们的需要的结果。非递归的方式是从小问题到大问题的过程。

【java代码——递归1（不保存中间状态）】

复制代码
public class Solution {
    public boolean PredictTheWinner(int[] nums) {
        return helper(nums, 0, nums.length-1) >= 0;
    }
    
    public int helper(int[] nums, int start, int end) {
        if(start == end) return nums[start];
        else return Math.max(nums[start]-helper(nums, start+1,end), nums[end]-helper(nums, start,end-1));
    }
}
复制代码
【java代码——递归2（保存中间状态）】

复制代码
public class Solution {
    public boolean PredictTheWinner(int[] nums) {
        return helper(nums, 0, nums.length-1, new Integer[nums.length][nums.length]) >= 0;
    }
    
    public int helper(int[] nums, int start, int end, Integer[][] dp) {
        if(dp[start][end] == null) {
            if(start == end) return nums[start];
            else return Math.max(nums[start]-helper(nums, start+1,end, dp), nums[end]-helper(nums, start,end-1, dp));
        }
        return dp[start][end];
    }
}
复制代码
【java代码——非递归】

复制代码
public class Solution {
    public boolean PredictTheWinner(int[] nums) {
        if(nums == null || nums.length == 0) return false;
        int n = nums.length;
        int[][] dp = new int[n][n];
        
        for(int i = 0; i < n; i++) {
            dp[i][i] = nums[i];
        }
        
        for(int i = n-2; i >= 0; i--) {
            for(int j = i+1; j < n; j++) {
                dp[i][j] = Math.max(nums[i]-dp[i+1][j], nums[j]-dp[i][j-1]);
            }
        }
        
        return dp[0][n-1] >= 0;
    }
}       


